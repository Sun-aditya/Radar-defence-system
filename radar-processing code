import processing.serial.*;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
boolean alertSent = false; // To prevent spamming
String botToken = "7510767951:AAGrUEBiWo7XgH7R3JlT8addGyMqxKTm2MI"; // Replace with your token
String chatID = "6127771323";     // Replace with your Telegram user ID


Serial myPort;
String data = "";
int iAngle, iDistance;
int closestDistance = 100;
int closestAngle = 0;
int prevAngle = 0;
int sweepDirection = 1;
boolean blink = false;

PFont orcFont;
int[] distanceGraph = new int[181];  // Distance storage per angle
ArrayList<PVector> sweepTrail = new ArrayList<PVector>();  // For radar sweep trail

void setup() {
  size(1280, 720);
  smooth();
  myPort = new Serial(this, "COM7", 9600); // Your COM port
  myPort.bufferUntil('.');
}

void draw() {
  noStroke();
  fill(0, 50); // fade old frames for trail effect
  rect(0, 0, width, height - height * 0.065);

  drawRadar();
  drawSweepTrail();
  drawLine();
  drawObject();
  drawText();
  drawLegend();
  drawGraph();

  blink = millis() % 1000 < 500;

  // Detect sweep direction reversal
  if ((sweepDirection == 1 && iAngle < prevAngle) || (sweepDirection == -1 && iAngle > prevAngle)) {
    closestDistance = 100;
    closestAngle = 0;
    sweepDirection *= -1;
  }
  prevAngle = iAngle;
}

void serialEvent(Serial myPort) {
  data = myPort.readStringUntil('.');
  if (data != null) {
    data = trim(data);
    data = data.substring(0, data.length() - 1);
    String[] parts = split(data, ',');

    if (parts.length == 2) {
      iAngle = int(parts[0]);
      iDistance = int(parts[1]);

      // Save closest object
      if (iDistance < closestDistance && iDistance > 0) {
          if (iDistance <= 10 && !alertSent) {
              sendTelegramAlert(iDistance);
              alertSent = true;
  } else if (iDistance > 10) {
    alertSent = false;  // Reset when object is gone
  }

        closestDistance = iDistance;
        closestAngle = iAngle;
      }

      distanceGraph[iAngle] = iDistance;

      // Add to trail
      float pixsDist = iDistance * ((height - height * 0.1666) * 0.025);
      float x = width / 2 + pixsDist * cos(radians(iAngle));
      float y = height - height * 0.074 - pixsDist * sin(radians(iAngle));
      sweepTrail.add(new PVector(x, y));
      if (sweepTrail.size() > 300) sweepTrail.remove(0);

      // Log the data each time it is updated
      logData(iAngle, iDistance);
    }
  }
}

void logData(int angle, int distance) {
  String filePath = "C:/Users/lenov/OneDrive/Desktop/GRAPH DATA/radar_log_data.log";
  try {
    FileWriter writer = new FileWriter(filePath, true); // true for appending data
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String timestamp = sdf.format(new Date());  // Current timestamp
    writer.append(timestamp + " - Angle: " + angle + "°, Distance: " + distance + "cm\n");
    writer.close();
  } catch (IOException e) {
    e.printStackTrace();
  }
}

void drawRadar() {
  pushMatrix();
  translate(width / 2, height - height * 0.074);
  noFill();
  strokeWeight(2);
  stroke(98, 245, 31);

  arc(0, 0, width * 0.94, width * 0.94, PI, TWO_PI);
  arc(0, 0, width * 0.73, width * 0.73, PI, TWO_PI);
  arc(0, 0, width * 0.52, width * 0.52, PI, TWO_PI);
  arc(0, 0, width * 0.31, width * 0.31, PI, TWO_PI);

  for (int a = 30; a <= 150; a += 30) {
    line(0, 0, (width / 2) * cos(radians(a)), -(width / 2) * sin(radians(a)));
  }
  line(-width / 2, 0, width / 2, 0);
  popMatrix();
}

void drawSweepTrail() {
  noFill();
  stroke(0, 255, 0, 80);
  strokeWeight(2);
  
  // Make a safe copy before iterating
  ArrayList<PVector> trailCopy = new ArrayList<PVector>(sweepTrail);
  for (PVector pt : trailCopy) {
    point(pt.x, pt.y);
  }
}

void drawLine() {
  pushMatrix();
  strokeWeight(9);
  stroke(30, 250, 60);
  translate(width / 2, height - height * 0.074);
  float radarLength = height - height * 0.12;
  line(0, 0, radarLength * cos(radians(iAngle)), -radarLength * sin(radians(iAngle)));
  popMatrix();
}

void drawObject() {
  pushMatrix();
  translate(width / 2, height - height * 0.074);
  strokeWeight(9);

  float pixsDistance = iDistance * ((height - height * 0.1666) * 0.025);

  // Color-coding based on distance
  if (iDistance <= 10) {
    stroke(255, 0, 0); // RED for objects < 10 cm
  } else if (iDistance <= 30) {
    stroke(255, 255, 0); // YELLOW for objects between 10-30 cm
  } else {
    stroke(0, 255, 0); // GREEN for objects > 30 cm
  }

  line(pixsDistance * cos(radians(iAngle)), -pixsDistance * sin(radians(iAngle)),
       (width - width * 0.505) * cos(radians(iAngle)), -(width - width * 0.505) * sin(radians(iAngle)));

  // Highlight closest object
  if (closestDistance < 100 && blink) {
    float closestPix = closestDistance * ((height - height * 0.1666) * 0.025);
    stroke(255, 0, 0); // Change the color for the closest object to red
    strokeWeight(15);
    point(closestPix * cos(radians(closestAngle)), -closestPix * sin(radians(closestAngle)));

    // Display the distance of the closest object near it
    fill(255);
    textSize(20);
    text("Closest: " + closestDistance + " cm", closestPix * cos(radians(closestAngle)) + 10, 
         -closestPix * sin(radians(closestAngle)) - 10);
  }

  popMatrix();
}


void drawText() {
  pushMatrix();
  fill(0);
  noStroke();
  rect(0, height - height * 0.0648, width, height);

  fill(98, 245, 31);
  textSize(25);
  text("10cm", width - width * 0.3854, height - height * 0.0833);
  text("20cm", width - width * 0.281, height - height * 0.0833);
  text("30cm", width - width * 0.177, height - height * 0.0833);
  text("40cm", width - width * 0.0729, height - height * 0.0833);

  textSize(40);
  text("Radar System G4(A)", width - width * 0.875, height - height * 0.0277);
  text("Angle: " + iAngle + "°", width - width * 0.48, height - height * 0.0277);
  if (iDistance < 100) text(iDistance + " cm", width - width * 0.225, height - height * 0.0277);

  textSize(25);
  fill(98, 245, 60);
  drawAngleLabel(30, -60);
  drawAngleLabel(60, -30);
  drawAngleLabel(90, 0);
  drawAngleLabel(120, 30);
  drawAngleLabel(150, 60);
  popMatrix();
}

void drawAngleLabel(int angleVal, float rotation) {
  float r = width / 2;
  float x = (width - width * 0.5) + r * cos(radians(angleVal));
  float y = (height - height * 0.0833) - r * sin(radians(angleVal));
  pushMatrix();
  translate(x, y);
  rotate(radians(rotation));
  text(angleVal + "°", 0, 0);
  popMatrix();
}

void drawLegend() {
  fill(255);
  textSize(20);
  text("Legend:", 30, 40);
  fill(0, 255, 0);
  rect(30, 50, 20, 20);
  fill(255);
  text("Distance > 40 cm", 60, 65);

  fill(255, 255, 0);
  rect(30, 80, 20, 20);
  fill(255);
  text("Distance > 15 cm", 60, 95);

  fill(255, 0, 0);
  rect(30, 110, 20, 20);
  fill(255);
  text("Distance < 15 cm", 60, 125);
}

void drawGraph() {
  pushMatrix();
  translate(880, 50);
  stroke(255);
  noFill();
  rect(0, 0, 380, 150);
  textSize(16);
  fill(255);
  text("Angle vs Distance", 110, -10);

  stroke(0, 255, 255);
  for (int i = 0; i < distanceGraph.length; i++) {
    float x = map(i, 0, distanceGraph.length, 0, 380);
    float y = map(distanceGraph[i], 0, 200, 150, 0);
    point(x, y);
  }
  popMatrix();
}

void keyPressed() {
  if (key == 's' || key == 'S') {
    saveGraphData();
  }
}

void saveGraphData() {
  String filePath = "C:/Users/lenov/OneDrive/Desktop/GRAPH DATA/distance_data.csv";
  try {
    FileWriter writer = new FileWriter(filePath);
    writer.append("Angle,Distance\n");
    for (int i = 0; i < distanceGraph.length; i++) {
      writer.append(i + "," + distanceGraph[i] + "\n");
    }
    writer.close();
    println("Data saved to " + filePath);
  } catch (IOException e) {
    e.printStackTrace();
  }
}
void sendTelegramAlert(int distance) {
  String message = "⚠️ Alert! Object detected within " + distance + " cm of the radar.";
  String url = "https://api.telegram.org/bot" + botToken +
               "/sendMessage?chat_id=" + chatID +
               "&text=" + message;

  try {
    loadStrings(url);  // Send the GET request
    println("Alert sent to Telegram!");
  } catch (Exception e) {
    println("Failed to send Telegram alert: " + e.getMessage());
  }
}
