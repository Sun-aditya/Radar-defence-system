#include <Servo.h>

const int trigPin = 8;
const int echoPin = 9;

const int redLED = 12;
const int buzzer = 11;
const int yellowLED = 6;
const int greenLED = 7;

const int servoPin = 10;

Servo myServo;

int angle = 0;
int distance = 0;
int direction = 1;

void setup() {
  Serial.begin(9600);
  myServo.attach(servoPin);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  pinMode(redLED, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(buzzer, OUTPUT);
}

void loop() {
  myServo.write(angle);
  delay(20);  // Let the servo reach the angle

  distance = getDistance();

  // Send angle and distance to Processing
  Serial.print(angle);
  Serial.print(",");
  Serial.print(distance);
  Serial.println(".");

  // Indicate using LEDs and buzzer
  updateIndicators(distance);

  // Sweep logic
  angle += direction;
  if (angle >= 180 || angle <= 0) {
    direction *= -1;
  }
}

int getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  int dist = duration * 0.034 / 2;

  // Clamp to max 100 cm for radar visibility
  if (dist == 0 || dist > 100) dist = 100;

  return dist;
}

void updateIndicators(int d) {
  if (d <= 15) {
    digitalWrite(redLED, HIGH);
    digitalWrite(yellowLED, LOW);
    digitalWrite(greenLED, LOW);
    digitalWrite(buzzer, HIGH);
  } else if (d <= 30) {
    digitalWrite(redLED, LOW);
    digitalWrite(yellowLED, HIGH);
    digitalWrite(greenLED, LOW);
    digitalWrite(buzzer, LOW);
  } else {
    digitalWrite(redLED, LOW);
    digitalWrite(yellowLED, LOW);
    digitalWrite(greenLED, HIGH);
    digitalWrite(buzzer, LOW);
  }
}
